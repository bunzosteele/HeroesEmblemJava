package bunzosteele.heroesemblem;

import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.TextureAtlas.AtlasRegion;

public class SpriteHolder {
	
	public final Sprite settingsIcon;
	public final Sprite horizontalChain;
	public final Sprite verticalChain;
	public final Sprite chainNW;
	public final Sprite chainNE;
	public final Sprite chainSW;
	public final Sprite chainSE;
	public final Sprite endTurnDisabled;
	public final Sprite endTurnEnabled;
	public final Sprite endTurnEmphasized;
	public final Sprite confirmDisabled;
	public final Sprite confirmEnabled;
	public final Sprite healthBackdrop;
	public final Sprite attackBackdrop;
	public final Sprite experienceBackdrop;
	public final Sprite accuracyBackdrop;
	public final Sprite defenseBackdrop;
	public final Sprite evasionBackdrop;
	public final Sprite controlsDivider;
	public final Sprite abilityEnabled;
	public final Sprite abilityEmphasis;
	public final Sprite abilityDisabled;
	public final Sprite infoOpen;
	public final Sprite infoClose;
	public final Sprite infoDisabled;
	public final Sprite undoEnabled;
	public final Sprite blueTile;
	public final Sprite goldTile;
	public final Sprite greenTile;
	public final Sprite purpleTile;
	public final Sprite redTile;
	public final Sprite crosshair;
	public final Sprite projectionBorder;
	public final Sprite projectionBackground;
	public final Sprite critBackground;
	public final Sprite damageBackground;
	public final Sprite healthBarBackground;
		
	public SpriteHolder(HeroesEmblem game){
		final AtlasRegion settingsRegion = game.textureAtlas.findRegion("settingsIcon");
		this.settingsIcon = new Sprite(settingsRegion);
		final AtlasRegion chainHorizontalRegion = game.textureAtlas.findRegion("Chain-Horizontal");
		this.horizontalChain = new Sprite(chainHorizontalRegion);
		final AtlasRegion chainVerticalRegion = game.textureAtlas.findRegion("Chain-Vertical");
		this.verticalChain = new Sprite(chainVerticalRegion);
		final AtlasRegion chainNWRegion = game.textureAtlas.findRegion("Chain-NW");
		this.chainNW = new Sprite(chainNWRegion);
		final AtlasRegion chainNERegion = game.textureAtlas.findRegion("Chain-NE");
		this.chainNE = new Sprite(chainNERegion);
		final AtlasRegion chainSWRegion = game.textureAtlas.findRegion("Chain-SW");
		this.chainSW = new Sprite(chainSWRegion);
		final AtlasRegion chainSERegion = game.textureAtlas.findRegion("Chain-SE");
		this.chainSE = new Sprite(chainSERegion);
		final AtlasRegion endTurnDisabledRegion = game.textureAtlas.findRegion("EndTurnDisabled");
		this.endTurnDisabled = new Sprite(endTurnDisabledRegion);
		final AtlasRegion endTurnEnabledRegion = game.textureAtlas.findRegion("EndTurnEnabled");
		this.endTurnEnabled = new Sprite(endTurnEnabledRegion);
		final AtlasRegion endTurnEmphasizedRegion = game.textureAtlas.findRegion("EndTurnEmphasized");
		this.endTurnEmphasized = new Sprite(endTurnEmphasizedRegion);
		final AtlasRegion confirmDisabledRegion = game.textureAtlas.findRegion("ConfirmDisabled");
		this.confirmDisabled = new Sprite(confirmDisabledRegion);
		final AtlasRegion confirmEnabledRegion = game.textureAtlas.findRegion("ConfirmEnabled");
		this.confirmEnabled = new Sprite(confirmEnabledRegion);
		final AtlasRegion healthBackdropRegion = game.textureAtlas.findRegion("HealthBackdrop");
		this.healthBackdrop = new Sprite(healthBackdropRegion);
		final AtlasRegion experienceBackdropRegion = game.textureAtlas.findRegion("ExperienceBackdrop");
		this.experienceBackdrop = new Sprite(experienceBackdropRegion);
		final AtlasRegion attackBackdropRegion = game.textureAtlas.findRegion("AttackBackdrop");
		this.attackBackdrop = new Sprite(attackBackdropRegion);
		final AtlasRegion accuracyBackdropRegion = game.textureAtlas.findRegion("AccuracyBackdrop");
		this.accuracyBackdrop = new Sprite(accuracyBackdropRegion);
		final AtlasRegion defenseBackdropRegion = game.textureAtlas.findRegion("DefenseBackdrop");
		this.defenseBackdrop = new Sprite(defenseBackdropRegion);
		final AtlasRegion evasionBackdropRegion = game.textureAtlas.findRegion("EvasionBackdrop");
		this.evasionBackdrop = new Sprite(evasionBackdropRegion);
		final AtlasRegion contolsDividerRegion = game.textureAtlas.findRegion("ControlsDivider");
		this.controlsDivider = new Sprite(contolsDividerRegion);
		final AtlasRegion abilityEnabledRegion = game.textureAtlas.findRegion("AbilityEnabled");
		this.abilityEnabled = new Sprite(abilityEnabledRegion);
		final AtlasRegion abilityEmphasisRegion = game.textureAtlas.findRegion("AbilityEmphasis");
		this.abilityEmphasis = new Sprite(abilityEmphasisRegion);
		final AtlasRegion abilityDisabledRegion = game.textureAtlas.findRegion("AbilityDisabled");
		this.abilityDisabled = new Sprite(abilityDisabledRegion);
		final AtlasRegion infoDisabledRegion = game.textureAtlas.findRegion("InfoDisabled");
		this.infoDisabled = new Sprite(infoDisabledRegion);
		final AtlasRegion infoOpenRegion = game.textureAtlas.findRegion("InfoOpen");
		this.infoOpen = new Sprite(infoOpenRegion);
		final AtlasRegion infoCloseRegion = game.textureAtlas.findRegion("InfoClose");
		this.infoClose = new Sprite(infoCloseRegion);
		final AtlasRegion undoEnabledRegion = game.textureAtlas.findRegion("UndoEnabled");
		this.undoEnabled = new Sprite(undoEnabledRegion);
		final AtlasRegion blueTileRegion = game.textureAtlas.findRegion("BlueTile");
		this.blueTile = new Sprite(blueTileRegion);
		final AtlasRegion goldTileRegion = game.textureAtlas.findRegion("GoldTile");
		this.goldTile = new Sprite(goldTileRegion);
		final AtlasRegion greenTileRegion = game.textureAtlas.findRegion("GreenTile");
		this.greenTile = new Sprite(greenTileRegion);
		final AtlasRegion purpleTileRegion = game.textureAtlas.findRegion("PurpleTile");
		this.purpleTile = new Sprite(purpleTileRegion);
		final AtlasRegion redTileRegion = game.textureAtlas.findRegion("RedTile");
		this.redTile = new Sprite(redTileRegion);
		final AtlasRegion crosshairRegion = game.textureAtlas.findRegion("Crosshair");
		this.crosshair = new Sprite(crosshairRegion);
		final AtlasRegion projectionBorderRegion = game.textureAtlas.findRegion("ProjectionBorder");
		this.projectionBorder = new Sprite(projectionBorderRegion);
		final AtlasRegion projectionBackgroundRegion = game.textureAtlas.findRegion("ProjectionBackground");
		this.projectionBackground = new Sprite(projectionBackgroundRegion);
		final AtlasRegion critBackgroundRegion = game.textureAtlas.findRegion("CritBackground");
		this.critBackground = new Sprite(critBackgroundRegion);
		final AtlasRegion damageBackgroundRegion = game.textureAtlas.findRegion("DamageBackground");
		this.damageBackground = new Sprite(damageBackgroundRegion);
		final AtlasRegion healthBarBackgroundRegion = game.textureAtlas.findRegion("HealthBarBackground");
		this.healthBarBackground = new Sprite(healthBarBackgroundRegion);
	}
}
